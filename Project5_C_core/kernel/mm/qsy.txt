#include <os/ioremap.h>
#include <os/mm.h>
#include <pgtable.h>
#include <type.h>

// maybe you can map it to IO_ADDR_START ?
static uintptr_t io_base = IO_ADDR_START;

// // using 2MB large page
// static void map_page(uint64_t va, uint64_t pa, PTE *pgdir)
// {
//     // //解析出vpn2，vpn1的值
//     // va &= VA_MASK;
//     // uint64_t vpn2 =
//     //     va >> (NORMAL_PAGE_SHIFT + PPN_BITS + PPN_BITS);
//     // uint64_t vpn1 = (vpn2 << PPN_BITS) ^
//     //                 (va >> (NORMAL_PAGE_SHIFT + PPN_BITS));
//     // if (pgdir[vpn2] == 0) {
//     //     // alloc a new second-level page directory
//     //     set_pfn(&pgdir[vpn2], alloc_page() >> NORMAL_PAGE_SHIFT);
//     //     set_attribute(&pgdir[vpn2], _PAGE_PRESENT); //设置该PTE的valid的位为1
//     //     clear_pgdir(pa2kva(get_pa(pgdir[vpn2])));
//     // }
//     // PTE *pmd = (PTE *)pa2kva(get_pa(pgdir[vpn2]));
//     // set_pfn(&pmd[vpn1], pa >> NORMAL_PAGE_SHIFT);
//     // set_attribute(
//     //     &pmd[vpn1], _PAGE_PRESENT | _PAGE_READ | _PAGE_WRITE |
//     //                     _PAGE_EXEC | _PAGE_ACCESSED | _PAGE_DIRTY);

//     uint64_t vpn2,vpn1;

//     va &= VA_MASK;
//     vpn2 =  va >> (NORMAL_PAGE_SHIFT + PPN_BITS + PPN_BITS);
//     vpn1 =  (vpn2 << PPN_BITS) ^
//             (va >> (NORMAL_PAGE_SHIFT + PPN_BITS));
//     /*---------check the correctness of vpn-----------*/
//     PTE * first_pgdir, * second_pgdir;
    
//     /*---------pa or kva?-----------*/
//     // should be kva (kernel manage memory by kva)
//     first_pgdir = (PTE *)pgdir;
//     if(first_pgdir[vpn2] == 0) // 说明第二级页表还没建立
//     {
//         set_pfn(&first_pgdir[vpn2], (kva2pa(allocPage(1))) >> NORMAL_PAGE_SHIFT);
//         set_attribute(&first_pgdir[vpn2], _PAGE_PRESENT);
//         clear_pgdir(pa2kva(get_pa(first_pgdir[vpn2])));
//     }

//     second_pgdir = (PTE *)pa2kva(get_pa(first_pgdir[vpn2]));// pa or kva? kva
//     set_pfn(&second_pgdir[vpn1], (pa >> NORMAL_PAGE_SHIFT));
//     set_attribute(
//         &second_pgdir[vpn1],  _PAGE_PRESENT | _PAGE_READ | _PAGE_WRITE | _PAGE_EXEC |
//                         _PAGE_USER | _PAGE_ACCESSED | _PAGE_DIRTY);
// }

// void *ioremap(unsigned long phys_addr, unsigned long size)
// {
//     // TODO: [p5-task1] map one specific physical region to virtual address
//     uintptr_t alloc_kva = io_base;
//     for( ; io_base < alloc_kva + size; io_base += LARGE_PAGE_SIZE, phys_addr += LARGE_PAGE_SIZE)
//     {
//         map_page(io_base, phys_addr, PGDIR_PA + KERNEL_MEM_OFFSET);
//     }
//     uint64_t origin = get_pa_of(alloc_kva, PGDIR_PA + KERNEL_MEM_OFFSET);
//     local_flush_tlb_all();
//     return alloc_kva;
// }

static void map_page(uint64_t va, uint64_t pa, PTE *pgdir)
{
    uint64_t vpn2,vpn1;
    va &= VA_MASK;
    vpn2 =  va >> (NORMAL_PAGE_SHIFT + PPN_BITS + PPN_BITS);
    vpn1 =  (vpn2 << PPN_BITS) ^
            (va >> (NORMAL_PAGE_SHIFT + PPN_BITS));

    PTE* first_pgdir = (PTE*)pgdir;
    if(first_pgdir[vpn2] == 0){
        set_pfn(&first_pgdir[vpn2], kva2pa(allocPage(1)) >> NORMAL_PAGE_SHIFT);
        set_attribute(&first_pgdir[vpn2], _PAGE_PRESENT);
        clear_pgdir(pa2kva(get_pa(first_pgdir[vpn2])));
    }

    PTE* second_pgdir = (PTE*)pa2kva(get_pa(first_pgdir[vpn2]));
    set_pfn(&second_pgdir[vpn1], pa >> NORMAL_PAGE_SHIFT);
    set_attribute(
    &second_pgdir[vpn1], _PAGE_PRESENT | _PAGE_READ | _PAGE_WRITE |
                    _PAGE_EXEC | _PAGE_ACCESSED | _PAGE_DIRTY);

}

void *ioremap(unsigned long phys_addr, unsigned long size)
{
    // TODO: [p5-task1] map one specific physical region to virtual address
    void* ret = io_base;
    uint64_t pa;
    uint64_t kva;
    io_base += size;

    for (kva = ret, pa = phys_addr; kva < io_base; kva += LARGE_PAGE_SIZE, pa += LARGE_PAGE_SIZE) {
        map_page(kva, pa, PGDIR_PA + KERNEL_MEM_OFFSET);
    }
    
    local_flush_tlb_all();
    return ret;
}

void iounmap(void *io_addr)
{
    // TODO: [p5-task1] a very naive iounmap() is OK
    // maybe no one would call this function?
}